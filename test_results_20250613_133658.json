{
  "test_summary": {
    "start_time": "2025-06-13T13:36:51.824697",
    "end_time": "2025-06-13T13:36:58.582882",
    "total_tests": 6,
    "passed_tests": 6,
    "server_url": "http://localhost:7860"
  },
  "detailed_results": {
    "プロンプト作成テスト": {
      "success": true,
      "result": "## ✅ プロンプト作成完了！\n\n**プロンプトID**: 11  \n**タイトル**: 自動テスト用プロンプト  \n**カテゴリ**: 自動テスト  \n**内容**: 自動テストで作成されたHello Worldプログラム...\n\n### 📝 次のステップ\n「ステップ3: 承認システム」タブに進んで、作成したプロンプトを承認してください。\n            ",
      "error": null,
      "timestamp": "2025-06-13T13:36:52.064860"
    },
    "承認待ちプロンプト確認テスト": {
      "success": true,
      "result": "## 📋 最新のプロンプト一覧\n\n### プロンプト ID: 11\n**タイトル**: 自動テスト用プロンプト\n**内容**: 自動テストで作成されたHello Worldプログラム...\n**作成日時**: 2025-06-13 13:36:51.976800\n\n### プロンプト ID: 10\n**タイトル**: ISSUES作成システム\n**内容**: # 社員がプロフィールを登録・公開し、お互いに参照できるシステム\n\n## 機能\n\n## LINEのクレーム対応システムの作成\n- クレームがあった用語をAPIでナレッジに登録するシステム\n- APIキ...\n**作成日時**: 2025-06-13 12:22:35\n\n### プロンプト ID: 9\n**タイトル**: Test Prompt\n**内容**: Test content...\n**作成日時**: 2025-06-11 21:19:32\n\n### プロンプト ID: 1\n**タイトル**: 社員プロフィールシステム\n**内容**: \n# 社員がプロフィールを登録・公開し、お互いに参照できるシステム\n\n## 機能\n\n## LINEのクレーム対応システムの作成\n- クレームがあった用語をAPIでナレッジに登録するシステム\n- API...\n**作成日時**: 2025-06-11 13:53:26\n\n### プロンプト ID: 2\n**タイトル**: FastAPI + SQLAlchemy\n**内容**: FastAPIとSQLAlchemyを使用したAPIの作成\n- ユーザー管理\n- 認証機能\n- CRUD操作...\n**作成日時**: 2025-06-11 13:53:26\n\n### 📝 次のアクション\n下のフォームでプロンプトIDを入力して承認してください。",
      "error": null,
      "timestamp": "2025-06-13T13:36:53.127328"
    },
    "プロンプト承認テスト": {
      "success": true,
      "result": "## ✅ 承認完了！\n\n**プロンプトID**: 1  \n**ステータス**: approved  \n**理由**: 自動テストによる承認  \n**承認日時**: 2025-06-13 13:36:54\n\n### 🚀 次のステップ\n「ステップ4: 実行テスト」タブに進んで、実行をシミュレートしてください。\n            ",
      "error": null,
      "timestamp": "2025-06-13T13:36:54.239473"
    },
    "実行シミュレーションテスト": {
      "success": true,
      "result": "## 🚀 実行結果\n\n**実行時刻**: 2025-06-13 13:36:55  \n**ステータス**: ✅ success  \n**メッセージ**: テスト実行が完了しました\n\n### 📊 実行ログ\n- ✅ プロンプト解析完了\n- ✅ コード生成完了\n- ✅ 安全性チェック完了\n- ✅ 実行完了\n\n### 🚀 次のステップ\n「ステップ5: GitHub連携」タブに進んで、GitHub Issue作成をテストしてください。\n            ",
      "error": null,
      "timestamp": "2025-06-13T13:36:55.351345"
    },
    "GitHub連携シミュレーションテスト": {
      "success": true,
      "result": "## 🐙 GitHub Issue作成完了\n\n**タイトル**: 🚀 AI-Human協働開発システム テスト実行完了  \n**作成日時**: 2025-06-13 13:36:56\n\n### 📝 Issue内容\n\n## 📋 実行サマリー\n- **実行日時**: 2025-06-13 13:36:56\n- **ステータス**: ✅ 成功\n- **実行時間**: 0.5秒\n\n## 🔧 実行内容\n- プロンプト処理\n- コード生成\n- 安全性チェック\n- 結果出力\n\n## 📊 システム状態\n- データベース: 正常\n- API連携: 正常  \n- ログシステム: 正常\n                \n\n**ラベル**: automation, test, ai-human-collaboration\n\n### 🎉 次のステップ\n「ステップ6: システム確認」タブに進んで、全体の状況を確認してください。\n\n（実際のGitHub連携は環境設定次第で有効になります）\n            ",
      "error": null,
      "timestamp": "2025-06-13T13:36:56.464919"
    },
    "システム状態確認テスト": {
      "success": true,
      "result": "## 🎯 システム全体状況レポート\n\n### 📊 データベース状態\n- ✅ プロンプトDB: 正常 (11件のプロンプト)\n- ✅ 承認DB: 正常 (3件の承認記録)\n\n### 🚀 システムステータス\n- ✅ Webサーバー: 起動中 (ポート7860)\n- ✅ Gradioインターフェース: 正常\n- ✅ ファイルシステム: 正常\n- ✅ 実行環境: Python 3.11.12\n\n### 🎉 完了おめでとうございます！\n\nAI-Human協働開発システムの基本的な流れをすべて体験しました！\n\n#### 📋 体験した内容\n1. ✅ システム概要の理解\n2. ✅ プロンプトの作成\n3. ✅ 承認プロセスの実行\n4. ✅ 実行システムのテスト\n5. ✅ GitHub連携のシミュレーション\n6. ✅ システム状態の確認\n\n#### 🚀 次のステップ\n各機能の詳細は、メインの各タブで更に詳しく利用できます：\n- **💾 プロンプト管理システム**: 本格的なプロンプト管理\n- **🎯 統合承認システム**: 詳細な承認フロー\n- **🤖 GitHub ISSUE自動化**: 実際のGitHub連携\n- **🚀 統合管理ダッシュボード**: システム全体の監視\n\nシステムを実際に使用する際は、これらのタブを活用してください！\n            ",
      "error": null,
      "timestamp": "2025-06-13T13:36:57.582399"
    }
  }
}